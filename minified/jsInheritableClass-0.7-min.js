/**
 * jsInheritableClass Minified v0.7
 * Â©Copyright 2013 lordtatty
 * Distributed under the terms of the GNU Lesser General Public License (LGPL) v3.0
 */
Function.prototype.inheritsFrom=function(a){newPrototype={};for(x in a.prototype)newPrototype[x]=a.prototype[x];this.prototype=newPrototype;this.prototype.constructor=this;this.prototype.parent=a.prototype;return this};var jsInheritableClass=function(){this.initObject()};jsInheritableClass.getVersion=function(){return"0.6.7"};
jsInheritableClass.prototype._getMethodCalledLevelArray=function(a){if("string"!==typeof a)throw new jsInheritableClass.Errors.IncorretParamType("string","method",a);void 0===this.calledLevel&&(this.calledLevel={});!0!==this.calledLevel[a]instanceof Array&&(this.calledLevel[a]=Array(this));return this.calledLevel[a]};jsInheritableClass.prototype.getCalledLevel=function(a){a=this._getMethodCalledLevelArray(a);return a[a.length-1]};
jsInheritableClass.prototype.addCalledLevel=function(a){a=this._getMethodCalledLevelArray(a);var b=a[a.length-1];if(void 0===b.parent)throw new jsInheritableClass.Errors.TopOfCallLevelStack;a.push(b.parent)};jsInheritableClass.prototype.removeCalledLevel=function(a){this._getMethodCalledLevelArray(a).pop()};
jsInheritableClass.prototype.callParentMethod=function(a,b,c){void 0===c&&(c=this);void 0===b&&(b=[]);this.addCalledLevel(a);if("function"!==typeof this.getCalledLevel(a)[a])throw new jsInheritableClass.Errors.CallLevelMethodDoesNotExist;b=this.getCalledLevel(a)[a].apply(c,b);this.removeCalledLevel(a);return b};jsInheritableClass.prototype.initObject=function(){this._inheritableData={};this._inheritableData.className=this.constructor.name;this.assertAllNecessaryMethodsAreImplemented()};
jsInheritableClass.prototype.requiredMethods=function(){return[]};jsInheritableClass.prototype.getAllRequiredMethods=function(){var a;try{a=this.callParentMethod("getAllRequiredMethods",[],this.parent)}catch(b){if("TopOfCallLevelStack"!==b.name)throw b;a=[]}var c=this.requiredMethods(),d;for(d in c)a.push(c[d]);return a};
jsInheritableClass.prototype.assertAllNecessaryMethodsAreImplemented=function(){var a=this.callParentMethod("getAllRequiredMethods"),b;for(b in a){var c=a[b];if(void 0===this[c])throw new jsInheritableClass.Errors.MissingRequiredMethod(c,this._inheritableData.className);}};jsInheritableClass.Errors={};jsInheritableClass.Errors.MissingRequiredMethod=function(a,b){this.name="MissingRequiredMethod";this.message="The method "+a+"() has not been defined for "+b};
jsInheritableClass.Errors.MissingRequiredMethod.prototype=Error.prototype;jsInheritableClass.Errors.TopOfCallLevelStack=function(){this.name="TopOfCallLevelStack";this.message="We have hit the top of the call level stack"};jsInheritableClass.Errors.TopOfCallLevelStack.prototype=Error.prototype;jsInheritableClass.Errors.CallLevelMethodDoesNotExist=function(){this.name="CallLevelMethodDoesNotExist";this.message="Method does not seem to exist"};
jsInheritableClass.Errors.CallLevelMethodDoesNotExist.prototype=Error.prototype;jsInheritableClass.Errors.IncorretParamType=function(a,b,c){this.name="ParamNotAString";this.message="The passed parameter "+b+" is expected to be of type: "+a+" \nInstead passed: "+typeof c;void 0!==c&&(this.message+="\nContents: "+c.toString())};jsInheritableClass.Errors.IncorretParamType.prototype=Error.prototype;