/**
 * jsInheritableClass Minified v0.6
 * Â©Copyright 2013 lordtatty
 * Distributed under the terms of the GNU Lesser General Public License (LGPL) v3.0
 */
Function.prototype.inheritsFrom=function(a){newPrototype={};for(x in a.prototype)newPrototype[x]=a.prototype[x];this.prototype=newPrototype;this.prototype.constructor=this;this.prototype.parent=a.prototype;return this};var jsInheritableClass={},jsInheritableClass=function(){this.initObject()};jsInheritableClass.prototype.getCalledLevelStack=function(){return this.calledLevel};jsInheritableClass.prototype.setCalledLevelStack=function(a){this.calledLevel=a};
jsInheritableClass.prototype.getCalledLevel=function(){void 0===this.calledLevel&&(this.calledLevel=[this]);return this.calledLevel[this.calledLevel.length-1]};jsInheritableClass.prototype.addCalledLevel=function(){void 0===this.calledLevel&&(this.calledLevel=[this]);var a=this.calledLevel[this.calledLevel.length-1];if(void 0===a.parent)throw new jsInheritableClass.Errors.TopOfCallLevelStack;this.calledLevel.push(a.parent)};jsInheritableClass.prototype.removeCalledLevel=function(){this.calledLevel.pop()};
jsInheritableClass.prototype.callParentMethod=function(a,b,c){void 0===c&&(c=this);void 0===b&&(b={});this.addCalledLevel();if("function"!==typeof this.getCalledLevel()[a])throw new jsInheritableClass.Errors.CallLevelMethodDoesNotExist;a=this.getCalledLevel()[a].apply(c,b);this.removeCalledLevel();return a};jsInheritableClass.prototype.initObject=function(){this._inheritableData={};this._inheritableData.className=this.constructor.name;this.assertAllNecessaryMethodsAreImplemented()};
jsInheritableClass.prototype.requiredMethods=function(){return[]};jsInheritableClass.prototype.getAllRequiredMethods=function(){var a;try{a=this.callParentMethod("getAllRequiredMethods",[],this.parent)}catch(b){if("TopOfCallLevelStack"!==b.name)throw b;a=[]}var c=this.requiredMethods(),d;for(d in c)a.push(c[d]);return a};
jsInheritableClass.prototype.runMethodWithFreshCallLevelStack=function(a){var b=this.getCalledLevelStack();this.setCalledLevelStack([this]);a=a.call(this);this.setCalledLevelStack(b);return a};jsInheritableClass.prototype.assertAllNecessaryMethodsAreImplemented=function(){var a=this.runMethodWithFreshCallLevelStack(this.getAllRequiredMethods),b;for(b in a){var c=a[b];if(void 0===this[c])throw new jsInheritableClass.Errors.MissingRequiredMethod(c,this._inheritableData.className);}};
jsInheritableClass.Errors={};jsInheritableClass.Errors.MissingRequiredMethod=function(a,b){this.name="MissingRequiredMethod";this.message="The method "+a+"() has not been defined for "+b};jsInheritableClass.Errors.MissingRequiredMethod.prototype=Error.prototype;jsInheritableClass.Errors.TopOfCallLevelStack=function(){this.name="TopOfCallLevelStack";this.message="We have hit the top of the call level stack"};jsInheritableClass.Errors.TopOfCallLevelStack.prototype=Error.prototype;
jsInheritableClass.Errors.CallLevelMethodDoesNotExist=function(){this.name="CallLevelMethodDoesNotExist";this.message="Method does not seem to exist"};jsInheritableClass.Errors.CallLevelMethodDoesNotExist.prototype=Error.prototype;